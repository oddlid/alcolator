// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(2018, 12, 20, 18, 41, 32, 0, time.UTC),
		},
		"/templates/apkform.html": &vfsgen۰CompressedFileInfo{
			name:             "apkform.html",
			modTime:          time.Date(2019, 2, 1, 23, 52, 8, 0, time.UTC),
			uncompressedSize: 3457,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xcc\x57\xdd\x6e\xdc\x36\x13\xbd\xcf\x53\x4c\x08\x24\xb6\x01\x53\xf2\x3a\xc6\x87\x20\x2b\xe9\x83\x61\x17\xe9\x45\xda\x06\x41\xda\xa2\x28\x7a\x41\x49\x23\x89\x09\x45\x2a\xe4\x68\x37\x0b\xc7\xef\x5e\x90\x92\xf6\xd7\x76\x02\x24\x30\x7a\x63\x0f\xc9\xe1\xcc\x39\x87\x33\x22\x37\x79\x7a\xfd\xdb\xd5\xfb\xbf\xde\xfe\x04\x0d\xb5\x2a\x7b\x92\xf8\x7f\xa0\x84\xae\x53\x86\x9a\x65\x4f\x00\x92\x06\x45\xe9\x0d\x80\xa4\x45\x12\xd0\x10\x75\x1c\x3f\xf5\x72\x91\xb2\x2b\xa3\x09\x35\xf1\xf7\xab\x0e\x19\x14\xc3\x28\x65\x84\x9f\x29\xf6\xa1\xe6\x50\x34\xc2\x3a\xa4\xb4\xa7\x8a\xbf\x64\x10\x6f\x47\xd2\xa2\xc5\x94\x2d\x24\x2e\x3b\x63\x69\x6b\xff\x52\x96\xd4\xa4\x25\x2e\x64\x81\x3c\x0c\x4e\x41\x6a\x49\x52\x28\xee\x0a\xa1\x30\x9d\x45\x67\xa7\xe0\x1a\x2b\xf5\x47\x4e\x86\x57\x92\x52\x6d\x36\xe1\x95\xd4\x1f\xc1\xa2\x4a\x99\xa3\x95\x42\xd7\x20\x12\x03\x5a\x75\x38\x82\x2b\x9c\x63\xd0\x58\xac\x52\xe6\xf9\xb8\x57\x71\xec\x48\x14\x1f\x3b\x41\x4d\x94\x1b\x43\x8e\xac\xe8\x8a\x52\x47\x85\x69\xe3\xf5\x44\x7c\x11\x9d\x47\x33\xbf\x7b\x33\x17\xb5\x52\x47\x21\xde\x94\x9d\x24\x29\xcc\x2e\x55\x61\x1a\xa3\xe0\x4a\xa8\xa2\x57\x82\x8c\x4d\xe2\x61\x65\xf0\x7a\xca\x39\xbc\x56\x26\x17\x0a\x9c\x24\x04\x12\x35\x1c\xd7\x24\xea\xe8\x83\x3b\x01\x0e\xaf\x8d\xa9\x15\xc2\xa5\x16\x6a\x45\xb2\x70\xc0\xf9\xb8\xd3\x15\x56\x76\x04\xc2\xad\x74\x01\xce\x16\x1b\x0e\xcb\xe5\x32\xaa\xc3\x3e\x12\x75\x2b\xb4\xa8\xd1\x06\x06\x3e\x6e\xfc\xc1\xfd\x5f\x96\xe9\xef\x97\x7c\x76\xfe\xbf\x97\x17\x67\x2f\x2e\x66\xfc\x05\xcb\x92\x78\x88\xb7\x13\x7c\x18\x00\x2c\xa5\x2e\xcd\x32\x2a\x05\x89\x37\x62\x85\x16\xd2\xc3\xa9\x2f\x5f\xe0\xef\x7f\xe6\xe3\x86\xaa\xd7\x05\x49\xa3\xc1\x67\x3c\x3e\xb9\x59\xbb\x45\x5d\xef\x9a\x63\x61\xeb\xbe\x45\x4d\xee\x64\x7e\x3b\xee\x08\x8e\x47\x1f\xdc\xd1\x29\x68\x5c\xc2\xb5\x20\x3c\x3e\x39\x99\xef\xac\x16\x46\x57\xb2\x3e\x3a\x85\xa3\x5d\xf4\x47\xa3\xdf\x36\x87\x24\x9e\x2a\x36\xc9\x4d\xb9\x1a\x69\x95\x72\x01\x85\x12\xce\xa5\xcc\x97\x99\x90\x1a\x2d\xe4\xc6\x96\x68\xd9\x44\x76\xdb\xa9\xe4\x95\xc2\xcf\xe0\xff\x70\x6b\x96\x6b\x1f\xdf\x10\xb3\xc9\xa9\x79\x01\x1d\x3f\x67\xd9\x74\xc4\x08\x62\x3c\x74\x47\x7d\x55\x25\x71\x33\x5b\xc7\x8e\x4b\xb9\x58\x0f\x2a\x63\x5b\x68\x91\x1a\x53\xa6\xac\xf6\xb5\x29\x82\x6a\x29\x8b\xb7\x33\x6d\xe1\xf1\x3b\x78\x6d\x4d\xdf\x41\x30\xad\x59\x82\x50\xb2\xd6\x5c\x12\xb6\x8e\x17\xa8\x69\x8b\xca\xd0\x05\x22\x47\xe5\xdd\x53\x56\xfa\x5e\x63\x1b\x05\x14\x77\x2d\xbf\x00\x6f\x84\x70\xc1\x95\x65\xd7\xbe\xa1\x42\x5f\xbe\x4a\xe2\x30\xb7\x13\x70\x47\xc4\x10\xe2\xe5\x4e\x46\x80\x44\xea\xae\xa7\xad\x4e\x63\x3b\x04\xbc\xf4\xd6\x28\x36\xb6\xfe\x88\x4a\x96\x6b\x73\x21\x54\x8f\x29\xbb\xb9\x81\x28\x60\xf9\x55\xb4\x08\xb7\xb7\x0c\x3a\x25\x0a\x6c\x8c\x2a\xd1\xa6\x6c\x03\x93\x81\xf5\x9f\x22\x8b\xe5\xd4\x7d\x77\xc8\x7d\x38\x7c\x58\xd8\xfb\x55\x5c\x18\xd5\xaa\x6f\x95\x71\x61\x54\xdf\x22\x1c\xb7\xea\xe4\x47\xa8\xa9\xfb\x36\x47\xfb\xb0\x9e\x23\xbe\x20\xe8\x68\xef\x2b\xfa\x87\x51\xbf\xbc\x39\x94\xf4\xec\x91\x95\xec\x0a\xfa\x56\x1d\x3b\xb4\xbe\xba\x45\x8d\x3f\x50\xc6\x3b\x55\x9c\x64\x0c\xe0\x82\x88\xc1\xda\x97\xf0\xed\xd5\xfb\x3b\x04\x8c\xce\x18\x38\xc2\x2e\x98\xb3\xc7\x96\xd3\xca\xe2\x9b\xfb\x3b\x38\x3f\x56\x49\x8e\xc8\x06\x35\x07\xfb\x40\x4f\x3f\xfd\x5f\x50\x74\x8f\xbe\xe8\xc9\xb0\x2c\xc9\x7b\x22\xa3\x47\xca\xae\xcf\x5b\xb9\x29\xdd\x9c\x34\xe4\xa4\x79\x67\x65\x2b\xec\x6a\xcd\xda\xf5\xf9\xc8\x39\x58\x23\x63\x7f\x4f\x0c\xb7\x45\x12\x0f\x51\xb3\x3d\xb8\xf7\x82\x10\xe3\x6b\x25\x66\x60\x8d\xc2\x94\x0d\xfb\x0f\x80\x38\x2c\x8c\x2e\x3d\x94\xec\x1d\x3a\xa4\x24\x16\xd9\x43\x0a\x25\xb1\x97\x62\x1a\xdd\xdc\x80\xac\x20\xfa\x59\xb8\x6b\x41\x02\x6e\x6f\xef\xb8\x19\x97\x7c\x76\x76\xc6\xb2\xe7\x3a\x77\xdd\x7c\x37\x16\x89\x5c\xe1\xe4\x17\x06\xdb\xb7\x19\x6d\x5e\x92\xd3\x8c\xdd\x2b\x2e\x6a\x7c\xc9\xba\x4e\xe8\x94\x9d\xb3\xec\xe0\xa3\x05\xad\x02\x53\xc1\xf3\x4f\xbd\xa1\xf9\xfe\x25\x31\xcc\xfa\xa3\x85\x83\xd2\x02\x41\xb0\xd7\xbf\xcf\x40\xb4\xa6\xd7\xe4\x80\xcc\xab\x24\xa6\x66\xb7\xa8\xb6\xb1\xf9\xd5\x1d\xec\x09\x6d\x9e\x16\xf7\x72\x29\xb3\x3f\x05\xa1\xf5\xb1\xcb\xc3\x35\x8f\xe6\x1d\xba\x5e\x51\xf0\x9a\xe8\xed\x3b\xef\x02\xb9\x27\xcf\xf8\xd4\xfc\x6a\xa6\x4b\x55\x7c\x57\x9e\x41\xcd\x0e\xad\x3f\x87\xd2\x4b\x79\x7f\xca\xce\x4a\x4d\x15\xb0\x67\xd1\x79\xc5\x26\x00\x21\xc0\x5b\xb4\xe1\x18\x02\x94\xef\xc7\x21\xbe\x46\xfe\x41\x24\x93\x24\x0f\xe3\x48\xe2\x9d\x03\x4f\xe2\x50\xdc\x5b\x5d\x83\xba\x9c\xba\x65\x68\x89\xe1\x7d\xbf\x79\x6a\x0e\x8f\xf7\x24\x1e\xc2\x24\xf1\xf0\x7b\xeb\xc9\xbf\x01\x00\x00\xff\xff\x69\xd4\x1a\x34\x81\x0d\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/apkform.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
