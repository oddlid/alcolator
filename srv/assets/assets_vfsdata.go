// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(2019, 1, 29, 22, 26, 45, 178218298, time.UTC),
		},
		"/templates/apkform.html": &vfsgen۰CompressedFileInfo{
			name:             "apkform.html",
			modTime:          time.Date(2019, 1, 29, 22, 26, 40, 0, time.UTC),
			uncompressedSize: 3096,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x97\xdf\x6b\xdc\x38\x10\xc7\xdf\xf3\x57\x4c\x05\x2d\x77\x50\x59\xd9\x5c\x1f\x4a\x62\x1b\x4a\x72\x70\x0f\xf7\x23\x94\x70\xc7\x3d\xca\xf6\x78\x2d\x22\x4b\xae\x34\xde\xed\x12\xf2\xbf\x1f\x92\xed\xdd\xf5\x6e\x36\x0d\xb4\xe4\x5e\x92\x91\x3c\x9a\xf9\xce\x47\xa3\x48\x49\xdf\xdc\xfc\x75\x7d\xf7\xef\xed\xaf\xd0\x50\xab\xf3\xb3\x34\xfc\x02\x2d\xcd\x32\x63\x68\x58\x7e\x06\x90\x36\x28\xab\x60\x00\xa4\x2d\x92\x84\x86\xa8\xe3\xf8\xa5\x57\xab\x8c\x5d\x5b\x43\x68\x88\xdf\x6d\x3a\x64\x50\x0e\xa3\x8c\x11\x7e\x25\x11\x42\x5d\x41\xd9\x48\xe7\x91\xb2\x9e\x6a\xfe\x91\x81\xd8\x8f\x64\x64\x8b\x19\x5b\x29\x5c\x77\xd6\xd1\xde\xfa\xb5\xaa\xa8\xc9\x2a\x5c\xa9\x12\x79\x1c\xbc\x07\x65\x14\x29\xa9\xb9\x2f\xa5\xc6\x6c\x91\x9c\xbf\x07\xdf\x38\x65\xee\x39\x59\x5e\x2b\xca\x8c\xdd\x85\xd7\xca\xdc\x83\x43\x9d\x31\x4f\x1b\x8d\xbe\x41\x24\x06\xb4\xe9\x70\x14\x57\x7a\xcf\xa0\x71\x58\x67\x2c\xd4\xe3\x2f\x85\xf0\x24\xcb\xfb\x4e\x52\x93\x14\xd6\x92\x27\x27\xbb\xb2\x32\x49\x69\x5b\xb1\x9d\x10\x1f\x92\x8b\x64\x11\x56\xef\xe6\x92\x56\x99\x24\xc6\x9b\xb2\x93\x22\x8d\xf9\x27\x5d\xda\xc6\x6a\xb8\x96\xba\xec\xb5\x24\xeb\x52\x31\x7c\x09\x54\xc5\x84\x35\x2d\x6c\xb5\x19\x17\x56\x6a\x05\xa5\x96\xde\x67\x2c\xb0\x90\xca\xa0\x83\xc2\xba\x0a\x1d\x1b\x5c\xe6\x4e\x15\xaf\x35\x7e\x85\xf0\x83\x3b\xbb\xde\xfa\x84\x5d\x5b\x4c\x4e\xcd\x2f\xd0\xf1\x0b\x96\x4f\x3a\x10\xe4\xa8\xcc\x53\x5f\xd7\xa9\x68\x16\xdb\xd8\xa2\x52\xab\xed\xa0\xb6\xae\x85\x16\xa9\xb1\x55\xc6\x96\x01\xa0\x2c\x49\x59\x93\x31\xb1\x9f\x69\x4f\x4f\x58\xc1\x97\xce\xf6\x1d\x44\xd3\xd9\x35\x48\xad\x96\x86\x2b\xc2\xd6\xf3\x12\x0d\xed\x95\x32\x6c\x95\x2c\x50\x07\xf7\x8c\x55\xa1\x21\xd8\x8e\x80\xe6\xbe\xe5\x1f\x20\x18\x31\x5c\x74\x65\xf9\x4d\xd8\xf5\xd8\x3c\x97\xa9\x88\x73\xb3\x80\x33\x88\x31\xc4\xc7\x59\x46\x80\x54\x99\xae\xa7\xbd\x76\x60\xb3\x02\x02\x7a\x67\x35\x1b\xfb\x73\x54\xa5\xaa\xad\xb9\x92\xba\xc7\x8c\x3d\x3c\x40\x12\xb5\xfc\x29\x5b\x84\xc7\x47\x06\x9d\x96\x25\x36\x56\x57\xe8\x32\xb6\x93\xc9\xc0\x85\xf3\xe2\xb0\x9a\x5a\xe4\x09\xdc\xc7\xc3\xe7\xc1\x9e\xa6\xb8\xb2\xba\xd5\x2f\xc5\xb8\xb2\xba\x6f\x11\x7e\x6a\xf5\xcf\x3f\x82\xa6\xe9\xdb\x02\xdd\xf3\x3c\x47\x7d\x11\xe8\x68\x1f\x12\xfd\xdb\xea\x3f\x7e\x3f\x46\x7a\xfe\xca\x24\xbb\x92\x5e\xca\xb1\x43\x17\xba\x5b\x2e\x7f\x48\x53\x8e\x18\x9f\xa4\x38\x61\x8c\xe2\x22\xc4\x68\x1d\x22\xbc\xbd\xbe\x7b\x02\x60\x72\xce\xc0\x13\x76\xd1\x5c\xbc\x36\x4e\xa7\xca\x17\x9f\xef\xe8\xfc\x5a\x2d\x39\x2a\x1b\x68\x0e\xf6\x11\xcf\x30\xfd\xff\xb4\xe4\x41\xc1\xb2\x27\xcb\xf2\xb4\xe8\x89\xac\x19\x8b\xf4\x7d\xd1\xaa\x5d\xb3\x16\x64\xa0\x20\xc3\x3b\xa7\x5a\xe9\x36\xdb\x3a\x7d\x5f\x8c\x55\x46\x6b\xac\x31\xdc\x0c\xc3\xfd\x90\x8a\x21\x6a\x7e\x20\xf7\xa4\x08\x39\x5e\xa2\x82\x81\xb3\x1a\x33\x36\xac\x3f\x12\xe2\xb1\xb4\xa6\x0a\x52\xf2\xcf\xe8\x91\x52\x21\x0f\x73\xcc\x2f\x1f\x11\x50\x4c\xa3\x87\x07\x50\x35\x24\xbf\x49\x7f\x23\x49\xc2\xe3\xe3\x13\x77\xe1\x9a\x2f\xce\xcf\x59\xfe\xce\x14\xbe\xbb\x9a\xc7\x22\x59\x68\x9c\xfc\xe2\x60\xff\xfe\xa2\xdd\x03\x67\x9a\x71\x07\xed\x44\x4d\x68\x52\xdf\x49\x93\xb1\x0b\x96\x1f\xfd\x99\x82\x56\x83\xad\xe1\xdd\x97\xde\xd2\xd5\xe1\xb5\x30\xcc\x86\xad\x85\xa3\x66\x02\x49\x70\x70\x62\xdf\x82\x6c\x6d\x6f\xc8\x03\xd9\xcb\x54\x50\x33\x6f\xaa\x7d\x6d\xe1\xeb\x4c\x7b\x4a\xbb\xc7\xc4\xc9\x5a\xaa\xfc\x1f\x49\xe8\x42\xec\xea\xf8\x5b\x50\xf3\x19\x7d\xaf\x29\x7a\x4d\xe5\x1d\x3a\xcf\x85\x9c\xc8\x33\xbe\x80\xbe\x99\xe9\x93\x2e\xbf\x2b\xcf\x40\xb3\x43\x17\xf6\xa1\x0a\x28\x4f\xa7\xec\x9c\x32\x54\x03\x7b\x9b\x5c\xd4\x6c\x12\x10\x03\xdc\xa2\x8b\xdb\x10\xa5\x7c\xbf\x0e\xf9\xad\xe2\x9f\x55\x32\x21\x79\x5e\x47\x2a\x66\x1b\x9e\x8a\xd8\xdc\x7b\xa7\x06\x4d\x35\x9d\x96\xe1\x48\x40\xfa\x86\x73\xd8\x3d\x2e\x39\x1f\x5e\xa3\x43\x98\x54\x0c\xff\x06\x9c\xfd\x17\x00\x00\xff\xff\x20\xf7\x86\x57\x18\x0c\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/apkform.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
