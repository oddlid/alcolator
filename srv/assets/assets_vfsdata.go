// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/static": &vfsgen۰DirInfo{
			name:    "static",
			modTime: time.Date(2018, 12, 23, 23, 43, 50, 264882927, time.UTC),
		},
		"/static/alc.css": &vfsgen۰CompressedFileInfo{
			name:             "alc.css",
			modTime:          time.Date(2018, 12, 23, 23, 43, 50, 264882927, time.UTC),
			uncompressedSize: 823,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xdb\x6e\xb3\x30\x10\x84\xaf\xe3\xa7\xb0\xc4\x35\x08\xfe\x5f\xa5\x8a\x79\x9a\x85\x5d\x1b\xab\xc6\x46\xb6\x49\x4b\x2b\xde\xbd\xe2\xa0\x34\x09\x3d\xa8\x87\x4b\xb0\xf7\x9b\xd9\x19\xd7\x0e\x47\xfe\xc2\x0e\xd2\xd9\x98\x4a\xe8\xb4\x19\x05\x0f\x60\x43\x1a\xc8\x6b\x59\x6d\x27\x41\x3f\x93\xe0\x45\xf6\x8f\xba\x8a\x1d\x6a\x68\x1e\x94\x77\x83\x45\xc1\x93\x3c\xcf\x2b\x36\x31\xd4\xa7\xa4\x71\x36\x92\x8d\x33\xef\xea\xca\xff\xf2\x38\x4f\x39\x8f\xe4\x53\x0f\xa8\x87\x20\xf8\x8a\xea\x01\x51\x5b\xb5\x7d\x4e\xac\x2d\x76\xd3\xe5\xb1\xa9\xd8\xa1\x71\xc6\x79\xc1\x13\x22\xda\xb3\x8a\x6b\x56\x9e\xdd\xad\x34\xd4\xa7\x4c\x3a\xdf\xed\x98\x44\xf5\x97\x8e\x8a\x1b\x46\x84\xda\xd0\x4c\xea\xc0\x2b\x6d\x05\xcf\x39\x0c\xd1\xdd\xe6\xf1\x13\xbb\xe5\x9b\x54\x0f\x6a\x11\x41\x1d\x7a\x03\xa3\x58\x65\xab\xbd\xea\xc4\x32\x30\x5e\xab\x76\xc9\x3b\xd2\x53\x4c\xc1\x68\x65\x05\x5f\x7e\x5e\x78\x90\x12\xef\xcf\x25\x65\x9e\xc2\x60\xe2\xa7\x12\x05\x75\xef\xae\xf6\x8d\xd4\x42\x0f\x76\x93\x4a\x5b\xf4\xe7\x27\xf6\x48\xb3\x39\xc1\x6b\x67\xf0\x2f\x92\xbb\x28\x7a\x5b\x6c\x57\xd3\x47\xdb\xfc\xa2\x28\xf6\x1a\x00\x00\xff\xff\x4e\xa6\xb4\x0f\x37\x03\x00\x00"),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(2018, 12, 23, 23, 52, 55, 120120496, time.UTC),
		},
		"/templates/apkform.html": &vfsgen۰CompressedFileInfo{
			name:             "apkform.html",
			modTime:          time.Date(2018, 12, 23, 23, 52, 55, 120120496, time.UTC),
			uncompressedSize: 2213,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x4d\x6b\xdc\x3c\x10\xc7\xef\xf9\x14\x13\x41\xe0\x79\x0e\x5e\x91\x9c\x4a\x2a\x1b\xc2\xa6\xd0\x43\x5f\x42\x09\x2d\x3d\x6a\xe5\xf1\x5a\x54\xb6\x5c\x69\xbc\x74\x59\xf6\xbb\x17\xc9\x72\xea\xf5\x2e\x21\x61\x73\xb2\x76\x46\x23\xfd\x66\x46\x7f\x69\xc5\xe5\xfd\xd7\xe5\xe3\xcf\x87\x0f\x50\x53\x63\x8a\x0b\x31\x7e\x50\x96\xc5\x05\x80\x68\x90\x24\xd4\x44\x5d\x86\xbf\x7b\xbd\xc9\xd9\xd2\xb6\x84\x2d\x65\x8f\xdb\x0e\x19\xa8\xe1\x57\xce\x08\xff\x10\x0f\xc1\xef\x41\xd5\xd2\x79\xa4\xbc\xa7\x2a\x7b\xc7\xe2\x2a\xa4\xc9\x60\x71\x67\x94\xad\xad\x81\xa5\x34\xaa\x37\x92\xac\x13\x7c\xf0\x84\x39\x46\xb7\xbf\xc0\xa1\xc9\x99\xa7\xad\x41\x5f\x23\x12\x03\xda\x76\x98\x56\x57\xde\x33\x68\xb0\xd4\x32\x67\x5e\x39\xc4\x96\x41\xed\xb0\xca\x19\xf7\x24\x49\x2b\x2e\x8d\x5a\xc4\x59\xbc\xb8\x10\x7c\xc8\x41\xac\x6c\xb9\x8d\x1b\x94\x7a\x03\xba\xcc\x59\x62\x8e\x64\xc9\xac\x8c\xf4\x3e\x67\x9d\x5c\x63\x32\x1f\x3a\x2a\xeb\x9a\x27\x07\x80\xa8\xaf\x8b\x31\x09\x04\x99\xd2\xf2\xd4\x57\x95\xe0\xf5\xf5\x64\x62\x08\x84\x06\xa9\xb6\x65\xce\xd6\x48\x93\x45\x42\x59\xe4\x6a\x48\x7e\x6a\x73\x87\x86\x60\x2a\x0b\x61\xe4\x0a\x4d\x71\xef\x42\x91\x5a\xd9\xe0\xad\xe0\x83\x49\x70\x2a\x4f\x46\xe8\xb6\xeb\x69\x52\x3f\x16\xe3\x72\x56\x86\x0f\x8b\x95\x48\xc3\x8d\x34\x3d\xe6\x6c\xb7\x83\x45\xdc\xe0\x8b\x6c\x10\xf6\x7b\x76\x62\x6d\xc1\xe7\x7c\x2f\x01\xde\x58\xd3\x37\x08\xff\x35\xe6\xff\x33\xb8\x37\xd6\x34\x26\x81\xa7\xf1\x9c\xfc\xbb\x35\x9f\x3f\xbd\x29\x7a\x87\x4e\x61\x4b\x72\x7d\x4e\xc5\x3b\x45\x89\x3b\x8e\xe6\xd4\x0f\xcb\xc7\xb7\x65\x76\x5a\x9d\x85\x1b\xe2\x47\xe0\x61\x7c\x84\x1c\xcc\x67\x42\x83\xb2\xc6\x77\xb2\xcd\xd9\x0d\x1b\x85\x26\x8d\xd3\xeb\x9a\xd8\x21\x9d\xef\x57\x8d\xfe\xc7\xe7\xfb\x55\xa2\x8b\xa3\xc4\x16\x04\xf9\x12\x1c\xc1\x67\xb2\x13\x3c\xa8\xf4\x49\xf6\xbc\xd4\x9b\x02\xc4\x65\x96\x41\x54\x6f\x96\x8d\xae\xdd\x0e\x74\x05\x8b\x8f\xd2\xdf\x4b\x92\xb0\xdf\x9f\xb8\x29\x1c\xfa\xde\x4c\x65\x2e\x42\x8a\x87\xde\xac\x2e\xdd\xc1\x45\x70\x74\x7e\xa1\x31\x60\x2b\x98\x2b\x32\x00\xc1\x51\x0f\x40\x12\xcc\xce\xd2\x15\xc8\xc6\xf6\x2d\x79\x20\x7b\x3b\x49\x34\xb0\x4c\xd0\x8e\xee\x9f\xa3\x46\x85\x83\xf2\x43\x12\xba\xdb\x13\x85\x0d\x2d\x9c\xb5\x2d\x70\x7c\x8b\x49\xc6\xa8\x31\x99\x79\xf0\x51\x4f\x4e\xed\x9b\x9e\x8b\x57\xef\x7c\x67\xd4\x59\xfb\x0e\x75\xed\xd0\x85\x2e\x94\xa1\xa8\x2f\x47\xe8\x9c\x6e\xa9\x02\x76\xb5\xb8\xa9\xd8\x08\x14\x17\x7c\x40\x17\x1b\x14\xd1\xce\xe7\x92\xaf\x2d\xce\xb3\x64\x63\xc9\x9e\xe7\x9a\x29\x67\x50\x4a\x14\xca\x70\xae\x0f\xa5\x82\x6d\x39\x4a\x64\xaa\xa9\xf0\xc6\xa6\x89\x53\x73\x7a\x94\xa3\x47\xf0\xe1\xcd\x16\x7c\xf8\x37\xf2\x37\x00\x00\xff\xff\x7a\xce\x21\x84\xa5\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static"].(os.FileInfo),
		fs["/templates"].(os.FileInfo),
	}
	fs["/static"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static/alc.css"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/apkform.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
