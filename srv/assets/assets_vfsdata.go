// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(2019, 2, 1, 23, 52, 13, 629743330, time.UTC),
		},
		"/templates/apkform.html": &vfsgen۰CompressedFileInfo{
			name:             "apkform.html",
			modTime:          time.Date(2019, 2, 1, 23, 52, 8, 0, time.UTC),
			uncompressedSize: 3457,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xd1\x6f\xdb\xb6\x13\x7e\xef\x5f\x71\x25\xd0\x26\x01\x42\x29\x4e\x83\x1f\x8a\x5a\xf2\x0f\x41\x32\x74\x0f\xdd\x56\x14\xdd\x86\x61\xd8\x03\x25\x9d\x24\xb6\x14\xa9\x92\x27\xbb\x46\x9a\xff\x7d\x20\x25\xd9\x96\x9d\xa4\x05\x5a\x04\x7b\x49\x8e\xe4\xf1\xee\xfb\x3e\xde\x89\x74\xf2\xf4\xfa\xb7\xab\xf7\x7f\xbd\xfd\x09\x6a\x6a\xd4\xe2\x49\xe2\xff\x81\x12\xba\x4a\x19\x6a\xb6\x78\x02\x90\xd4\x28\x0a\x6f\x00\x24\x0d\x92\x80\x9a\xa8\xe5\xf8\xa9\x93\xcb\x94\x5d\x19\x4d\xa8\x89\xbf\x5f\xb7\xc8\x20\xef\x47\x29\x23\xfc\x4c\xb1\x0f\x35\x87\xbc\x16\xd6\x21\xa5\x1d\x95\xfc\x25\x83\x78\x37\x92\x16\x0d\xa6\x6c\x29\x71\xd5\x1a\x4b\x3b\xfb\x57\xb2\xa0\x3a\x2d\x70\x29\x73\xe4\x61\x70\x0a\x52\x4b\x92\x42\x71\x97\x0b\x85\xe9\x2c\x3a\x3b\x05\x57\x5b\xa9\x3f\x72\x32\xbc\x94\x94\x6a\xb3\x0d\xaf\xa4\xfe\x08\x16\x55\xca\x1c\xad\x15\xba\x1a\x91\x18\xd0\xba\xc5\x01\x5c\xee\x1c\x83\xda\x62\x99\x32\xcf\xc7\xbd\x8a\x63\x47\x22\xff\xd8\x0a\xaa\xa3\xcc\x18\x72\x64\x45\x9b\x17\x3a\xca\x4d\x13\x6f\x26\xe2\x8b\xe8\x3c\x9a\xf9\xdd\xdb\xb9\xa8\x91\x3a\x0a\xf1\xc6\xec\x24\x49\xe1\xe2\x52\xe5\xa6\x36\x0a\xae\x84\xca\x3b\x25\xc8\xd8\x24\xee\x57\x7a\xaf\xa7\x9c\xc3\x6b\x65\x32\xa1\xc0\x49\x42\x20\x51\xc1\x71\x45\xa2\x8a\x3e\xb8\x13\xe0\xf0\xda\x98\x4a\x21\x5c\x6a\xa1\xd6\x24\x73\x07\x9c\x0f\x3b\x5d\x6e\x65\x4b\x20\xdc\x5a\xe7\xe0\x6c\xbe\xe5\xb0\x5a\xad\xa2\x2a\xec\x23\x51\x35\x42\x8b\x0a\x6d\x60\xe0\xe3\xc6\x1f\xdc\xff\x65\x91\xfe\x7e\xc9\x67\xe7\xff\x7b\x79\x71\xf6\xe2\x62\xc6\x5f\xb0\x45\x12\xf7\xf1\x26\xc1\xfb\x01\xc0\x4a\xea\xc2\xac\xa2\x42\x90\x78\x23\xd6\x68\x21\x3d\x9c\xfa\xf2\x05\xfe\xfe\x67\x3e\x6c\x28\x3b\x9d\x93\x34\x1a\x7c\xc6\xe3\x93\x9b\x8d\x5b\xd4\x76\xae\x3e\x16\xb6\xea\x1a\xd4\xe4\x4e\xe6\xb7\xc3\x8e\xe0\x78\xf4\xc1\x1d\x9d\x82\xc6\x15\x5c\x0b\xc2\xe3\x93\x93\xf9\x64\x35\x37\xba\x94\xd5\xd1\x29\x1c\x4d\xd1\x1f\x0d\x7e\xbb\x1c\x92\x78\xac\xd8\x24\x33\xc5\x7a\xa0\x55\xc8\x25\xe4\x4a\x38\x97\x32\x5f\x66\x42\x6a\xb4\x90\x19\x5b\xa0\x65\x23\xd9\x5d\xa7\x82\x97\x0a\x3f\x83\xff\xc3\xad\x59\x6d\x7c\x7c\x43\xcc\x46\xa7\xfa\x05\xb4\xfc\x9c\x2d\xc6\x23\x46\x10\xc3\xa1\x3b\xea\xca\x32\x89\xeb\xd9\x26\x76\x5c\xc8\xe5\x66\x50\x1a\xdb\x40\x83\x54\x9b\x22\x65\x95\xaf\x4d\x11\x54\x4b\x59\xbc\x9b\x69\x07\x8f\xdf\xc1\x2b\x6b\xba\x16\x82\x69\xcd\x0a\x84\x92\x95\xe6\x92\xb0\x71\x3c\x47\x4d\x3b\x54\xfa\x2e\x10\x19\x2a\xef\x9e\xb2\xc2\xf7\x1a\xdb\x2a\xa0\xb8\x6b\xf8\x05\x78\x23\x84\x0b\xae\x6c\x71\xed\x1b\x2a\xf4\xe5\xab\x24\x0e\x73\x93\x80\x13\x11\x43\x88\x97\x93\x8c\x00\x89\xd4\x6d\x47\x3b\x9d\xc6\x26\x04\xbc\xf4\xd6\x28\x36\xb4\xfe\x80\x4a\x16\x1b\x73\x29\x54\x87\x29\xbb\xb9\x81\x28\x60\xf9\x55\x34\x08\xb7\xb7\x0c\x5a\x25\x72\xac\x8d\x2a\xd0\xa6\x6c\x0b\x93\x81\xf5\x9f\x22\x8b\xc5\xd8\x7d\x77\xc8\x7d\x38\x7c\x58\xd8\xfb\x55\x5c\x1a\xd5\xa8\x6f\x95\x71\x69\x54\xd7\x20\x1c\x37\xea\xe4\x47\xa8\xa9\xbb\x26\x43\xfb\xb0\x9e\x03\xbe\x20\xe8\x60\xef\x2b\xfa\x87\x51\xbf\xbc\x39\x94\xf4\xec\x91\x95\x6c\x73\xfa\x56\x1d\x5b\xb4\xbe\xba\x45\xf5\x43\x8a\x72\x90\xf1\x4e\x15\x47\x19\x03\xb8\x20\x62\xb0\xf6\x25\x7c\x7b\xf5\xfe\x0e\x01\xa3\x33\x06\x8e\xb0\x0d\xe6\xec\xb1\xe5\xb4\x32\xff\xe6\xfe\x0e\xce\x8f\x55\x92\x03\xb2\x5e\xcd\xde\x3e\xd0\xd3\x4f\xff\x17\x14\xdd\xa3\x2f\x3a\x32\x6c\x91\x64\x1d\x91\xd1\x03\x65\xd7\x65\x8d\xdc\x96\x6e\x46\x1a\x32\xd2\xbc\xb5\xb2\x11\x76\xbd\x61\xed\xba\x6c\xe0\x1c\xac\x81\xb1\xbf\x27\xfa\xdb\x22\x89\xfb\xa8\x8b\x3d\xb8\xf7\x82\x10\xc3\x6b\x25\x66\x60\x8d\xc2\x94\xf5\xfb\x0f\x80\x38\xcc\x8d\x2e\x3c\x94\xc5\x3b\x74\x48\x49\x2c\xf6\x73\x4c\xaf\xa2\xd8\x4b\x31\x8e\x6e\x6e\x40\x96\x10\xfd\x2c\xdc\xb5\x20\x01\xb7\xb7\x77\xdc\x8c\x2b\x3e\x3b\x3b\x63\x8b\xe7\x3a\x73\xed\x7c\x1a\x8b\x44\xa6\x70\xf4\x0b\x83\xdd\xdb\x8c\xb6\x2f\xc9\x71\xc6\xee\x15\x17\xd5\xbe\x64\x5d\x2b\x74\xca\xce\xd9\xe2\xe0\xa3\x05\x8d\x02\x53\xc2\xf3\x4f\x9d\xa1\xf9\xfe\x25\xd1\xcf\xfa\xa3\x85\x83\xd2\x02\x41\xb0\xd7\xbf\xcf\x40\x34\xa6\xd3\xe4\x80\xcc\xab\x24\xa6\x7a\x5a\x54\xbb\xd8\xfc\xea\x04\x7b\x42\xdb\xa7\xc5\xbd\x5c\x8a\xc5\x9f\x82\xd0\xfa\xd8\xc5\xe1\x9a\x47\xf3\x0e\x5d\xa7\x28\x78\x8d\xf4\xf6\x9d\xa7\x40\xee\xc9\x33\x3c\x35\xbf\x9a\xe9\x52\xe5\xdf\x95\xa7\x57\xb3\x45\xeb\xcf\xa1\xf0\x52\xde\x9f\xb2\xb5\x52\x53\x09\xec\x59\x74\x5e\xb2\x11\x40\x08\xf0\x16\x6d\x38\x86\x00\xe5\xfb\x71\x88\xaf\x91\x7f\x10\xc9\x28\xc9\xc3\x38\x92\x78\x72\xe0\x49\x1c\x8a\x7b\xa7\x6b\x50\x17\x63\xb7\xf4\x2d\xd1\xbf\xef\xb7\x4f\xcd\xfe\xf1\x9e\xc4\x7d\x98\x24\xee\x7f\x6f\x3d\xf9\x37\x00\x00\xff\xff\x69\xd4\x1a\x34\x81\x0d\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/apkform.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
