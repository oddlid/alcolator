// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/static": &vfsgen۰DirInfo{
			name:    "static",
			modTime: time.Date(2018, 12, 23, 21, 2, 44, 277608268, time.UTC),
		},
		"/static/alc.css": &vfsgen۰CompressedFileInfo{
			name:             "alc.css",
			modTime:          time.Date(2018, 12, 23, 21, 2, 44, 277608268, time.UTC),
			uncompressedSize: 228,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x4e\xc5\x30\x0c\x05\xd7\xcd\x29\x7c\x81\x54\xff\x2f\xd8\xa4\xa7\x71\xb0\x9b\x46\xb8\x71\x94\xb8\xa2\x08\x71\x77\x94\x80\x04\xdb\xf1\x58\xf3\xd6\x8a\x89\xe1\xd3\x2d\x94\x7b\x15\xfc\x08\x60\x18\x85\x37\xb7\x9c\xd8\x52\x2e\x01\x1e\x80\x97\xe9\xe6\xbe\xdc\x8a\xd2\x72\x3a\x6c\xe8\xc6\xb7\x79\x94\x9c\x4a\x80\x09\xa7\xd0\xb8\x5f\x32\xef\x3f\xdf\xde\xb4\x06\x78\xf2\xb9\xb9\xa5\x22\x51\x2e\x29\xc0\x63\x7d\x99\x20\x6a\x23\x6e\x5e\x78\xb7\x5f\x08\x5d\x25\x13\xa4\xc6\x5c\xfe\x84\xa8\x66\x7a\x06\x78\xd6\x1b\x08\xfb\xc1\x04\x51\xf0\xf5\xed\x5f\xd1\x1f\xd4\x46\x75\xd7\x62\xfe\x9d\xc7\x9e\x00\x51\x85\x86\xe3\xbe\x03\x00\x00\xff\xff\xba\xde\xee\x3b\xe4\x00\x00\x00"),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(2018, 12, 23, 21, 4, 8, 197668571, time.UTC),
		},
		"/templates/apkform.html": &vfsgen۰CompressedFileInfo{
			name:             "apkform.html",
			modTime:          time.Date(2018, 12, 23, 21, 4, 8, 197668571, time.UTC),
			uncompressedSize: 2017,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfd\x14\x7c\x04\x14\x78\x76\x48\x84\xf6\x34\x74\xb2\x81\x22\x1d\xb0\xc3\x5e\x8a\xa1\xd8\xb0\xa3\x22\xd1\xb1\x30\xd9\xf2\x24\x3a\x58\x10\xe4\xbb\x0f\x92\xed\xb4\xb6\xb7\x75\x4d\x7b\x32\x4d\x8b\xe4\x8f\x7f\x89\x96\xf8\xef\xe6\xd3\xea\xee\xdb\xed\x5b\x28\xa9\xb2\xf9\x99\x18\x1e\x28\x75\x7e\x06\x20\x2a\x24\x09\x25\x51\xb3\xc0\x1f\xad\xd9\x66\x6c\xe5\x6a\xc2\x9a\x16\x77\xbb\x06\x19\xa8\xee\x2d\x63\x84\x3f\x89\xc7\xe0\x37\xa0\x4a\xe9\x03\x52\xd6\x52\xb1\x78\xcd\x52\x16\x32\x64\x31\xbf\xb6\xca\x95\xce\xc2\x4a\x5a\xd5\x5a\x49\xce\x0b\xde\x7d\x89\x6b\xac\xa9\xbf\x83\x47\x9b\xb1\x40\x3b\x8b\xa1\x44\x24\x06\xb4\x6b\xb0\xcf\xae\x42\x60\x50\xa1\x36\x32\x63\x41\x79\xc4\x9a\x41\xe9\xb1\xc8\x18\x0f\x24\xc9\x28\x2e\xad\x5a\xa6\x55\x3c\x3f\x13\xbc\xeb\x41\xac\x9d\xde\xa5\x02\xda\x6c\x41\x59\x19\x42\xc6\x1a\xb9\xc1\x44\x36\x76\x17\xce\x57\xbd\x1b\x40\x94\x17\xf9\x40\x8a\x20\x7b\xf6\x40\x6d\x51\x08\x5e\x5e\x1c\x97\xc5\x20\xa8\x90\x4a\xa7\x33\xb6\x41\x3a\x26\x88\x7d\xcb\x75\xd7\xdd\xbd\xc7\x3f\x7c\x8d\x0e\x9d\x0b\x2b\xd7\x68\xf3\x1b\x1f\x15\xa8\x65\x85\x57\x82\x77\x2e\xc1\x49\xff\x66\xbd\xa9\x9b\x96\x1e\x48\xc3\x52\x54\xc6\x74\x7c\x30\x30\xfa\x68\x6e\xa5\x6d\x31\x63\xfb\x3d\x2c\x53\xfa\x8f\xb2\x42\x38\x1c\xd8\x2c\xb3\xe0\x63\xb2\xc7\x41\xb7\xce\xb6\x15\xc2\xff\x95\x7d\x75\x32\xef\xd6\xd9\xca\xf6\xc0\xbd\x3d\x25\xfe\xe2\xec\x87\xf7\x2f\x84\xdc\xa0\x57\x58\x93\xdc\x9c\xae\x70\xa3\xa8\xe7\x4d\xd6\x94\xf6\x76\x75\xf7\x52\xac\xde\xa8\x67\x60\xc6\xe8\x01\xb4\xb3\x67\xa8\xd1\x7d\x32\x2c\x28\x67\x43\x23\xeb\x8c\x5d\xb2\x61\x7c\xa4\xf5\x66\x53\x12\x1b\x73\x85\x76\x5d\x99\x7b\xb2\xd0\xae\x7b\xae\x64\xf5\x54\x71\xd0\x1e\x03\x11\x7c\x34\x4e\x82\xc7\xc9\xeb\x87\x98\x6b\xb3\xed\xcc\xfd\x1e\x4c\x01\xcb\x77\x32\xdc\x48\x92\x70\x38\xcc\xa6\xdc\x63\x68\xed\xfd\x98\x8a\xd8\xc6\xf8\xdb\xa2\xd4\xfe\xc1\x18\xcf\xce\x22\x54\x16\x5c\x01\xd3\xa9\x82\xc2\x79\x98\xe9\x0b\x92\x60\x72\x3e\xce\x41\x56\xae\xad\x29\x00\xb9\xab\x63\x3b\x91\xe3\x08\x35\xf9\x73\x88\xe9\x8e\xe8\xfc\xab\x24\xf4\x57\x33\xc9\xe2\xd6\x4c\xb6\x23\x56\xff\x9c\x1a\x4b\x31\x43\x0b\xe3\xd0\x89\xd6\xf3\x7a\xfd\xdf\xfb\x89\x15\xaf\xad\x3a\xb1\x5e\xa7\x5f\x83\x3e\xaa\xad\xa3\x78\xff\x5a\xba\xf1\xa6\xa6\x02\xd8\xf9\xf2\xb2\x60\x03\x48\x4a\x77\x8b\x3e\x6d\x43\x42\x7a\x0e\x8f\x7c\x9a\x18\x7f\x25\x1a\x24\xfa\x33\xcf\xe8\xe4\x8f\xcf\x3a\xd6\xba\x3b\xe3\xbd\x5b\xf0\xee\xbe\x13\xbc\xbb\xc9\x7f\x05\x00\x00\xff\xff\x1a\xc4\xec\xdd\xe1\x07\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static"].(os.FileInfo),
		fs["/templates"].(os.FileInfo),
	}
	fs["/static"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static/alc.css"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/apkform.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
